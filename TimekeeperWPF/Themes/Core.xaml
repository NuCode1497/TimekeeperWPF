<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:clr="clr-namespace:System;assembly=mscorlib"
    xmlns:tools="clr-namespace:TimekeeperWPF.Tools"
    xmlns:wpftk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <Style x:Key="WindowStyle" TargetType="Window">
        <Setter Property="Background" Value="{StaticResource Window.Background}"/>
    </Style>
    <Style x:Key="BasicErrorTemplate" TargetType="Control">
        <Setter Property="Margin" Value="5,1,1,1"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <TextBlock 
                            Foreground="Red" FontSize="16" Text="!" 
                            ToolTip="{Binding ElementName=controlWithError, 
                            Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <AdornedElementPlaceholder Name="controlWithError"/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Background" Value="Pink"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, 
                    Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipsyErrorTemplate" TargetType="{x:Type Control}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Ellipse DockPanel.Dock="Right" Width="15" Height="15" Margin="-25,0,0,0" StrokeThickness="1" Fill="Red" 
                                         ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <Ellipse.Stroke>
                                <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                    <GradientStop Color="#FFFA0404" Offset="0"/>
                                    <GradientStop Color="#FFC9C7C7" Offset="1"/>
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                        </Ellipse>
                        <TextBlock DockPanel.Dock="Right" Foreground="White" FontSize="11pt" Margin="-15,5,0,0" FontWeight="Bold" Text="!"
                                           ToolTip="{Binding ElementName=controlWithError, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <AdornedElementPlaceholder Name="controlWithErrror"/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BasicErrorTemplate}">
        <Setter Property="MinHeight" Value="22"/>
    </Style>
    <Style x:Key="InputBaseStyle" TargetType="{x:Type wpftk:InputBase}" BasedOn="{StaticResource BasicErrorTemplate}">
        <Setter Property="MinHeight" Value="22"/>
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}"/>
    <Style TargetType="{x:Type wpftk:MaskedTextBox}" BasedOn="{StaticResource TextBoxStyle}"/>
    <Style TargetType="{x:Type wpftk:TimeSpanUpDown}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="{x:Type wpftk:TimePicker}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="{x:Type wpftk:DateTimePicker}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="{x:Type wpftk:IntegerUpDown}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="{x:Type wpftk:DoubleUpDown}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="{x:Type wpftk:DecimalUpDown}" BasedOn="{StaticResource InputBaseStyle}"/>
    <Style TargetType="ContentControl">
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="4,1"/>
    </Style>
    <Style TargetType="ToggleButton">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="2,1"/>
        <Setter Property="BorderBrush" Value="{StaticResource ToggleButton.BorderBrush}"/>
    </Style>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style x:Key="{x:Type GroupBox}" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{StaticResource GroupBox.BorderBrush}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Header" Value="Features"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="4"/>
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="Transparent"
                                Background="{TemplateBinding Background}"/>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2"
                                          Margin="{TemplateBinding Padding}"/>
                        <Border CornerRadius="5" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="6">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header" Padding="6,0,6,0"
                                Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource DataGrid.AlternatingRowBackground}"/>
        <Setter Property="RowBackground" Value="{StaticResource DataGrid.RowBackground}"/>
        <Setter Property="AlternationCount" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Background" Value="{StaticResource DataGrid.Background}"/>
    </Style>
    <Style x:Key="DGLongTextStyle" TargetType="TextBlock">
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="MaxWidth" Value="400"/>
        <Setter Property="TextBlock.FontSize" Value="12"/>
        <Setter Property="TextBlock.LineHeight" Value="14"/>
        <Setter Property="TextBlock.MaxHeight" Value="42"/>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{StaticResource ListBox.Disabled.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ListBox.Disabled.Border}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=Content.Text}"/>
    </Style>
    <Style TargetType="ToolTip">
        <Style.Resources>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
        <Setter Property="MaxWidth" Value="500" />
    </Style>
    <ControlTemplate x:Key="TinyButtonTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="controlLayout" Width="16" Height="16">
            <Ellipse x:Name="ButtonSurface" Fill="{DynamicResource Background.Static}">
                <Ellipse.Style>
                    <Style TargetType="Ellipse">
                        <Setter Property="Fill" Value="Goldenrod"/>
                    </Style>
                </Ellipse.Style>
            </Ellipse>
            <Label x:Name="ButtonCaption" Width="10" Height="10"
                   VerticalAlignment="Center" HorizontalAlignment="Center" 
                   Foreground="{DynamicResource Foreground.Static}"
                   FontFamily="{TemplateBinding FontFamily}" 
                   FontWeight="{TemplateBinding FontWeight}" 
                   FontSize="{TemplateBinding FontSize}" 
                   Content="{TemplateBinding Content}" 
                   Margin="0"
                   Padding="0"
                   RenderTransformOrigin="0.5,0.5">
                <Label.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="{DynamicResource ScaleX}"
                                        ScaleY="{DynamicResource ScaleY}"/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform X="{DynamicResource TranslateX}" 
                                            Y="{DynamicResource TranslateY}"/>
                    </TransformGroup>
                </Label.RenderTransform>
            </Label>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="controlLayout"
                        Property="Opacity"
                        Value="0.5"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ButtonSurface" 
                        Property="Fill" 
                        Value="{DynamicResource Background.MouseOver}"/>
                <Setter TargetName="ButtonCaption" 
                        Property="Foreground" 
                        Value="{DynamicResource Foreground.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="ButtonSurface" 
                        Property="Fill" 
                        Value="{DynamicResource Background.Pressed}"/>
                <Setter TargetName="ButtonCaption" 
                        Property="Foreground" 
                        Value="{DynamicResource Foreground.Pressed}"/>
                <Setter TargetName="controlLayout" 
                        Property="RenderTransformOrigin" 
                        Value="0.5,0.5"/>
                <Setter TargetName="controlLayout" 
                        Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="TinyButtonStyle" TargetType="Button">
        <Setter Property="Template" Value="{StaticResource TinyButtonTemplate}"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
    </Style>
    <Style x:Key="TinyButtonDeleteStyle" TargetType="Button" BasedOn="{StaticResource TinyButtonStyle}">
        <Style.Resources>
            <tools:ResourceFinder x:Key="Background.Static" ResourceKey="TinyButton.Delete.Background.Static"/>
            <tools:ResourceFinder x:Key="Foreground.Static" ResourceKey="TinyButton.Delete.Foreground.Static"/>
            <tools:ResourceFinder x:Key="Background.Pressed" ResourceKey="TinyButton.Delete.Background.Pressed"/>
            <tools:ResourceFinder x:Key="Foreground.Pressed" ResourceKey="TinyButton.Delete.Foreground.Pressed"/>
            <tools:ResourceFinder x:Key="Background.MouseOver" ResourceKey="TinyButton.Delete.Background.MouseOver"/>
            <tools:ResourceFinder x:Key="Foreground.MouseOver" ResourceKey="TinyButton.Delete.Foreground.MouseOver"/>
            <clr:Double x:Key="TranslateX">0.5</clr:Double>
            <clr:Double x:Key="TranslateY">1</clr:Double>
            <clr:Double x:Key="ScaleX">1</clr:Double>
            <clr:Double x:Key="ScaleY">1</clr:Double>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Content" Value="r"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="8"/>
        <Setter Property="ToolTip" Value="Remove"/>
        <Setter Property="CommandParameter" Value="{Binding}"/>
        <Setter Property="Command" Value="{Binding RemoveCommand, ElementName=ThisControl}"/>
        <Setter Property="Visibility" Value="{Binding Path=RemoveButtonVisibility, ElementName=ThisControl}"/>
    </Style>
    <Style x:Key="TinyButtonCommitStyle" TargetType="Button" BasedOn="{StaticResource TinyButtonStyle}">
        <Style.Resources>
            <tools:ResourceFinder x:Key="Background.Static" ResourceKey="TinyButton.Commit.Background.Static"/>
            <tools:ResourceFinder x:Key="Foreground.Static" ResourceKey="TinyButton.Commit.Foreground.Static"/>
            <tools:ResourceFinder x:Key="Background.Pressed" ResourceKey="TinyButton.Commit.Background.Pressed"/>
            <tools:ResourceFinder x:Key="Foreground.Pressed" ResourceKey="TinyButton.Commit.Foreground.Pressed"/>
            <tools:ResourceFinder x:Key="Background.MouseOver" ResourceKey="TinyButton.Commit.Background.MouseOver"/>
            <tools:ResourceFinder x:Key="Foreground.MouseOver" ResourceKey="TinyButton.Commit.Foreground.MouseOver"/>
            <clr:Double x:Key="TranslateX">-0.5</clr:Double>
            <clr:Double x:Key="TranslateY">-0.5</clr:Double>
            <clr:Double x:Key="ScaleX">1</clr:Double>
            <clr:Double x:Key="ScaleY">1</clr:Double>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Content" Value="a"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="ToolTip" Value="Commit"/>
    </Style>
    <Style x:Key="TinyButtonAddStyle" TargetType="Button" BasedOn="{StaticResource TinyButtonStyle}">
        <Style.Resources>
            <tools:ResourceFinder x:Key="Background.Static" ResourceKey="TinyButton.Add.Background.Static"/>
            <tools:ResourceFinder x:Key="Foreground.Static" ResourceKey="TinyButton.Add.Foreground.Static"/>
            <tools:ResourceFinder x:Key="Background.Pressed" ResourceKey="TinyButton.Add.Background.Pressed"/>
            <tools:ResourceFinder x:Key="Foreground.Pressed" ResourceKey="TinyButton.Add.Foreground.Pressed"/>
            <tools:ResourceFinder x:Key="Background.MouseOver" ResourceKey="TinyButton.Add.Background.MouseOver"/>
            <tools:ResourceFinder x:Key="Foreground.MouseOver" ResourceKey="TinyButton.Add.Foreground.MouseOver"/>
            <clr:Double x:Key="TranslateX">4</clr:Double>
            <clr:Double x:Key="TranslateY">-3</clr:Double>
            <clr:Double x:Key="ScaleX">2</clr:Double>
            <clr:Double x:Key="ScaleY">2</clr:Double>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Content" Value="+"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="8"/>
        <Setter Property="ToolTip" Value="Add"/>
    </Style>
    <ControlTemplate x:Key="PopUpTemplate" TargetType="ContentControl">
        <Border x:Name="PopUpBlackoutBorder"
                Background="{StaticResource PopUp.Behind.Background}">
            <Border x:Name="PopUpContainerBorder"
                    BorderBrush="{StaticResource PopUp.Window.Border}" 
                    Background="{StaticResource PopUp.Window.Background}"
                    Margin="30" CornerRadius="4" BorderThickness="3" 
                    MaxWidth="500" MaxHeight="800" 
                    SnapsToDevicePixels="True" UseLayoutRounding="True"
                    HorizontalAlignment="Center" VerticalAlignment="Center">
                <Border.Effect>
                    <DropShadowEffect/>
                </Border.Effect>
                <ContentPresenter x:Name="PopUpCP"/>
            </Border>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="EditPopUpTemplate" TargetType="ContentControl" >
        <ContentControl x:Name="EditPopUpCC" Template="{StaticResource PopUpTemplate}">
            <Grid x:Name="EditPopUpContentGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="12"/>
                </Grid.RowDefinitions>
                <!--Properties Editor-->
                <Border Margin="5" Grid.ColumnSpan="2" 
                        Background="#0a0a0a0a"
                        BorderThickness="1" BorderBrush="LightGray">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <ContentPresenter x:Name="PropEditorCP" Grid.Row="0" Grid.ColumnSpan="2" Margin="5"/>
                    </ScrollViewer>
                </Border>
                <!--Validations List-->
                <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2" x:Name="ValidationsSV" Height="Auto"
                              VerticalScrollBarVisibility="Auto"
                              IsTabStop="False" Margin="12,0,12,6">
                    <ItemsControl Margin="8" Foreground="Red" Name="ValidationsItemsControl" IsTabStop="False"
                                  DataContext="{Binding Path=Content, ElementName=PropEditorCP}"
                                  ItemsSource="{Binding Path=(Validation.Errors)}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ItemsControl Name="ValidationsItem" IsTabStop="False" 
                                              ItemsSource="{Binding Path=ErrorContent}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
                <!--Cancel Save Buttons-->
                <Button 
                        Grid.Column="0" Grid.Row="2" x:Name="CancelButton" Content="Cancel" Width="70"
                        Command="{Binding Path=DataContext.CancelCommand, 
                        RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid, AncestorLevel=3}}"/>
                <Button 
                        Grid.Column="1" Grid.Row="2" x:Name="SaveButton" Content="Save" Width="70"
                        Command="{Binding Path=DataContext.CommitCommand, 
                        RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Grid, AncestorLevel=3}}"/>
            </Grid>
        </ContentControl>
    </ControlTemplate>
    <ControlTemplate x:Key="EntityTagTemplate" TargetType="ContentControl">
        <Border Name="LabelBdr" Margin="2" CornerRadius="4" BorderThickness="1" 
                SnapsToDevicePixels="True" 
                BorderBrush="{StaticResource EntityTag.BorderBrush}">
            <Border.Style>
                <Style TargetType="Border">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsEditable}" Value="False">
                            <Setter Property="Background" Value="{StaticResource EntityTag.Background.Locked}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsEditable}" Value="True">
                            <Setter Property="Background" Value="{StaticResource EntityTag.Background}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <Grid Name="LabelLayoutGrid" Height="20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Grid.Column="2"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="DeleteButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Foreground" Value="Crimson"/>
        <Setter Property="Content">
            <Setter.Value>
                <Grid>
                    <TextBlock Text="r" FontFamily="Webdings" FontSize="16" Margin="0,0,0,0"/>
                </Grid>
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{Binding Path=DeleteSelectedCommand}"/>
        <Setter Property="ToolTip" Value="Delete (Ctrl+D)"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RefreshButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Content">
            <Setter.Value>
                <Grid>
                    <TextBlock Text="q" FontFamily="Webdings" FontSize="20" Margin="-2,0,-2,-4"/>
                </Grid>
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{Binding Path=GetDataCommand}"/>
        <Setter Property="ToolTip" Value="Refresh (Ctrl+R)"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="TableViewControlsTemplate" TargetType="ContentControl">
        <ToolBarTray>
            <ToolBar Band="1" BandIndex="1">
                <Button Content="New" x:Name="NewItemBtn" ToolTip="Ctrl+N" 
                        Command="{Binding Path=NewItemCommand}"/>
                <Button Content="Edit" x:Name="EditSelectedBtn" ToolTip="Ctrl+E" 
                        Command="{Binding Path=EditSelectedCommand}"/>
                <Button x:Name="DeleteSelectedBtn" Style="{StaticResource DeleteButtonStyle}"/>
                <Button x:Name="GetDataBtn" Style="{StaticResource RefreshButtonStyle}"/>
            </ToolBar>
        </ToolBarTray>
    </ControlTemplate>
</ResourceDictionary>