<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TimekeeperWPF"
                    xmlns:tools="clr-namespace:TimekeeperWPF.Tools"
                    xmlns:cal="clr-namespace:TimekeeperWPF.Calendar"
                    xmlns:clr="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpftools="http://schemas.xceed.com/wpf/xaml/toolkit">

    <!--#region DataContexts-->
    <DataTemplate DataType="{x:Type local:NotesViewModel}">
        <local:NotesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:FakeNotesViewModel}">
        <local:NotesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:MonthViewModel}">
        <local:MonthView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:FakeMonthViewModel}">
        <local:MonthView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:LabelsViewModel}">
        <local:BasicEntitiesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:ResourcesViewModel}">
        <local:BasicEntitiesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:TaskTypesViewModel}">
        <local:BasicEntitiesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:TimePointsViewModel}">
        <local:BasicEntitiesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:TimeTasksViewModel}">
        <local:TimeTasksView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:TimePatternsViewModel}">
        <local:TimePatternsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:DayViewModel}">
        <local:DayView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:WeekViewModel}">
        <local:WeekView/>
    </DataTemplate>
    <!--#endregion-->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <!--#region Control Syles and Templates-->
    <Style x:Key="WindowStyle" TargetType="Window">
        <Setter Property="Background" Value="{StaticResource Window.Background}"/>
    </Style>
    <Style x:Key="BasicErrorTemplate" TargetType="Control">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <TextBlock Foreground="Red" FontSize="20" Text="!" 
                                       ToolTip="{Binding ElementName=controlWithError, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <AdornedElementPlaceholder Name="controlWithError"/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="Background" Value="Pink"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="EllipsyErrorTemplate" TargetType="{x:Type Control}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="True">
                        <Ellipse DockPanel.Dock="Right" Width="15" Height="15" Margin="-25,0,0,0" StrokeThickness="1" Fill="Red" 
                                         ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <Ellipse.Stroke>
                                <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                    <GradientStop Color="#FFFA0404" Offset="0"/>
                                    <GradientStop Color="#FFC9C7C7" Offset="1"/>
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                        </Ellipse>
                        <TextBlock DockPanel.Dock="Right" Foreground="White" FontSize="11pt" Margin="-15,5,0,0" FontWeight="Bold" Text="!"
                                           ToolTip="{Binding ElementName=controlWithError, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                        <Border BorderBrush="Red" BorderThickness="1">
                            <AdornedElementPlaceholder Name="controlWithErrror"/>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BasicErrorTemplate}">
        <Setter Property="MinHeight" Value="26"/>
        <Setter Property="Margin" Value="2"/>
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}"/>
    <Style TargetType="{x:Type wpftools:MaskedTextBox}" BasedOn="{StaticResource TextBoxStyle}"/>
    <Style TargetType="{x:Type wpftools:TimeSpanUpDown}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="{x:Type wpftools:DateTimePicker}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="{x:Type wpftools:IntegerUpDown}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="{x:Type wpftools:DoubleUpDown}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="4,1"/>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BasicErrorTemplate}"/>
    <Style TargetType="Label">
        <Setter Property="Margin" Value="2"/>
    </Style>
    <Style TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="{StaticResource GroupBox.BorderBrush}"/>
        <Setter Property="Margin" Value="12,12,12,6"/>
        <Setter Property="Header" Value="Features"/>
        <Setter Property="Padding" Value="0,0,-2,-2"/>
    </Style>
    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource BasicErrorTemplate}">
        <Setter Property="Margin" Value="2"/>
    </Style>
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="AlternatingRowBackground" Value="{StaticResource DataGrid.AlternatingRowBackground}"/>
        <Setter Property="RowBackground" Value="{StaticResource DataGrid.RowBackground}"/>
        <Setter Property="AlternationCount" Value="1"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="Background" Value="{StaticResource DataGrid.Background}"/>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="SelectionMode" Value="Single"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{StaticResource ListBox.Disabled.Background}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ListBox.Disabled.Border}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=Content.Text}"/>
    </Style>
    <Style TargetType="ToolTip">
        <Style.Resources>
            <Style TargetType="ContentPresenter">
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
        <Setter Property="MaxWidth" Value="500" />
    </Style>
    <ControlTemplate x:Key="TinyButtonTemplate" TargetType="{x:Type Button}">
        <Grid x:Name="controlLayout" Width="16" Height="16">
            <Ellipse x:Name="ButtonSurface" Fill="{DynamicResource Background.Static}"/>
            <Label x:Name="ButtonCaption" Width="20" Height="20"
                        VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource Foreground.Static}"
                        FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}" 
                        Content="{TemplateBinding Content}" RenderTransformOrigin="0.5,0.5">
                <Label.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform X="{DynamicResource TranslateX}" Y="{DynamicResource TranslateY}"/>
                    </TransformGroup>
                </Label.RenderTransform>
            </Label>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ButtonSurface" Property="Fill" Value="{DynamicResource Background.MouseOver}"/>
                <Setter TargetName="ButtonCaption" Property="Foreground" Value="{DynamicResource Foreground.MouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="ButtonSurface" Property="Fill" Value="{DynamicResource Background.Pressed}"/>
                <Setter TargetName="ButtonCaption" Property="Foreground" Value="{DynamicResource Foreground.Pressed}"/>
                <Setter TargetName="controlLayout" Property="RenderTransformOrigin" Value="0.5,0.5"/>
                <Setter TargetName="controlLayout" Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX="0.8" ScaleY="0.8"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="EntityDeleteButtonStyle" TargetType="Button">
        <Style.Resources>
            <RadialGradientBrush x:Key="Background.Static">
                <GradientStop Color="Red" Offset="0.432"/>
                <GradientStop Color="Black" Offset="0.932"/>
                <GradientStop Color="DarkRed" Offset="0.911"/>
            </RadialGradientBrush>
            <SolidColorBrush x:Key="Foreground.Static" Color="Wheat"/>
            <RadialGradientBrush x:Key="Background.Pressed">
                <GradientStop Color="MediumVioletRed" Offset="0.432"/>
                <GradientStop Color="Black" Offset="0.932"/>
                <GradientStop Color="PaleVioletRed" Offset="0.911"/>
            </RadialGradientBrush>
            <SolidColorBrush x:Key="Foreground.Pressed" Color="Wheat"/>
            <SolidColorBrush x:Key="Background.MouseOver" Color="Cyan"/>
            <SolidColorBrush x:Key="Foreground.MouseOver" Color="Black"/>
            <clr:Double x:Key="TranslateX">0.5</clr:Double>
            <clr:Double x:Key="TranslateY">1</clr:Double>
        </Style.Resources>
        <Setter Property="Content" Value="r"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="8"/>
        <Setter Property="Template" Value="{StaticResource TinyButtonTemplate}"/>
    </Style>
    <Style x:Key="EntityAddButtonStyle" TargetType="Button">
        <Style.Resources>
            <RadialGradientBrush x:Key="Background.Static">
                <GradientStop Color="Green" Offset="0.432"/>
                <GradientStop Color="Black" Offset="0.932"/>
                <GradientStop Color="DarkGreen" Offset="0.911"/>
            </RadialGradientBrush>
            <SolidColorBrush x:Key="Foreground.Static" Color="Wheat"/>
            <RadialGradientBrush x:Key="Background.Pressed">
                <GradientStop Color="MediumTurquoise" Offset="0.432"/>
                <GradientStop Color="Black" Offset="0.932"/>
                <GradientStop Color="PaleTurquoise" Offset="0.911"/>
            </RadialGradientBrush>
            <SolidColorBrush x:Key="Foreground.Pressed" Color="Wheat"/>
            <SolidColorBrush x:Key="Background.MouseOver" Color="Cyan"/>
            <SolidColorBrush x:Key="Foreground.MouseOver" Color="Black"/>
            <clr:Double x:Key="TranslateX">-0.5</clr:Double>
            <clr:Double x:Key="TranslateY">-0.5</clr:Double>
        </Style.Resources>
        <Setter Property="Content" Value="a"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template" Value="{StaticResource TinyButtonTemplate}"/>
    </Style>
    <ControlTemplate x:Key="PopUpTemplate" TargetType="ContentControl">
        <!--Grey out background content-->
        <Grid Background="{StaticResource PopUp.Behind.Background}"
                  KeyboardNavigation.TabNavigation="Cycle"
                  Width="{Binding ElementName=SV, Path=ActualWidth}"
                  Height="{Binding ElementName=SV, Path=ActualHeight}" >
            <Border BorderBrush="{StaticResource PopUp.Window.Border}" 
                        Margin="30" CornerRadius="4" BorderThickness="3" 
                        Name="PopUpBorder"
                        MaxWidth="500" MaxHeight="800" 
                        SnapsToDevicePixels="True" UseLayoutRounding="True"
                        HorizontalAlignment="Center" VerticalAlignment="Center">
                <Border.Effect>
                    <DropShadowEffect/>
                </Border.Effect>
                <Grid Background="{StaticResource PopUp.Window.Background}">
                    <ContentPresenter/>
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="EditPopUpTemplate" TargetType="ContentControl" >
        <ContentControl Template="{StaticResource PopUpTemplate}" x:Name="EditPopUp" IsTabStop="False">
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <Setter Property="Visibility" Value="{Binding Path=IsEditingItemOrAddingNew, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <Style.Triggers>
                        <Trigger Property="Visibility" Value="Visible">
                            <Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="12"/>
                </Grid.RowDefinitions>
                <!--Properties Editor-->
                <GroupBox Header="Properties" Grid.Row="0" Grid.ColumnSpan="2" >
                    <ContentPresenter x:Name="PropEditorCP" />
                </GroupBox>
                <!--Validations List-->
                <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2" Name="ValidationsScroller" Height="Auto"
                              VerticalScrollBarVisibility="Auto"
                              IsTabStop="False" Margin="12,0,12,6">
                    <ItemsControl Margin="8" Foreground="Red" Name="ValidationsItemsControl" IsTabStop="False"
                                  ItemsSource="{Binding ElementName=DataEditor, Path=(Validation.Errors)}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ItemsControl Name="ValidationsItem" IsTabStop="False" 
                                                  ItemsSource="{Binding Path=ErrorContent}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
                <!--Cancel Save Buttons-->
                <Button Grid.Column="0" Grid.Row="2" x:Name="CancelButton" Content="Cancel" Width="70"
                        Command="{Binding Path=CancelCommand}"/>
                <Button Grid.Column="1" Grid.Row="2" x:Name="SaveButton" Content="Save" Width="70"
                        Command="{Binding Path=CommitCommand}"/>
            </Grid>
        </ContentControl>
    </ControlTemplate>
    <ControlTemplate x:Key="EntityTemplate" TargetType="ContentControl">
        <Border Name="LabelBdr" Margin="2" CornerRadius="4" BorderThickness="1" 
                    Background="{StaticResource BasicEntity.Background}" 
                    BorderBrush="{StaticResource BasicEntity.BorderBrush}">
            <Grid Name="LabelLayoutGrid" Height="20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="2"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Grid.Column="2"/>
            </Grid>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="BasicEntityTemplate" TargetType="ContentControl">
        <ContentControl Template="{StaticResource EntityTemplate}">
            <StackPanel Orientation="Horizontal">
                <Label Grid.Column="1" Height="32" VerticalAlignment="Center"
                           Content="{Binding Path=Name, FallbackValue='qgyilkjQ^Test'}" 
                           FontSize="14" Foreground="{StaticResource BasicEntity.Foreground}" FontWeight="Bold"/>
                <ContentPresenter Grid.Column="2" Name="LabelExtras"/>
            </StackPanel>
        </ContentControl>
    </ControlTemplate>
    <ControlTemplate x:Key="TableViewControlsTemplate" TargetType="ContentControl">
        <ToolBarTray>
            <ToolBar Band="1" BandIndex="1">
                <Button Content="New" x:Name="NewItemBtn" Command="{Binding Path=NewItemCommand}"/>
                <Button Content="Edit" x:Name="EditSelectedBtn" Command="{Binding Path=EditSelectedCommand}"/>
                <Button Content="Delete" x:Name="DeleteSelectedBtn" Command="{Binding Path=DeleteSelectedCommand}"/>
                <Button Margin="2" Content="Refresh" x:Name="GetDataBtn" Command="{Binding Path=GetDataCommand}"/>
            </ToolBar>
        </ToolBarTray>
    </ControlTemplate>
    <ControlTemplate x:Key="CalendarViewControlsTemplate" TargetType="ContentControl">
        <ToolBarTray>
            <ToolBar Band="1" BandIndex="1">
                <Button x:Name="PreviousButton" Content="&lt;--" Command="{Binding Path=PreviousCommand}"/>
                <Button x:Name="NextButton" Content="--&gt;" Command="{Binding Path=NextCommand}"/>
                <Button x:Name="OrientationButton" Content="Orientation" Command="{Binding Path=ToggleOrientationCommand}"/>
                <Button x:Name="ScaleUpButton" Content="Scale Up" Command="{Binding Path=ScaleUpCommand}"/>
                <Button x:Name="ScaleDownButton" Content="Scale Down" Command="{Binding Path=ScaleDownCommand}"/>

            </ToolBar>
        </ToolBarTray>
    </ControlTemplate>
    <!--#endregion-->
</ResourceDictionary>